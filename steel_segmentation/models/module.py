# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/05_models.module.ipynb (unless otherwise specified).

__all__ = ['models_dir', 'class_metrics', 'get_classifier_learner', 'seg_metrics', 'get_segmentation_learner']

# Cell
from ..core import *
from ..data import *
from ..preprocessing import *
from .dls import *
from .metrics import *

import warnings
with warnings.catch_warnings():
    warnings.simplefilter('ignore')
    from fastai.vision.all import *
    import fastai
from fastcore.foundation import *

# Cell
models_dir = path / "models"

# Cell
class_metrics = [accuracy_multi, PrecisionMulti(), RecallMulti()]

# Cell
def get_classifier_learner(bs:int, arch=resnet18, metrics=class_metrics, toload:str=None):
    """Get a classification `Learner`"""
    dls = get_classification_dls(bs)
    arch = partial(arch, pretrained=True)
    learner = cnn_learner(dls=dls, arch=arch, metrics=metrics, pretrained=True)

    if toload and toload.endswith(".pth"):
        return learner.load(models_dir/toload)

    return learner

# Cell
seg_metrics = [DiceMulti(), dice_kaggle]

# Cell
def get_segmentation_learner(bs: int, szs, arch=resnet18, metrics=seg_metrics, toload: str = None):
    dls = get_segmentation_dls(bs, szs)
    segmentation_learner = unet_learner(
        dls=dls, arch=arch, metrics=metrics, pretrained=True)
    if toload and toload.endswith('.pt'):
        encoder_path = models_dir / "ResNet18-2_class.pt"
        segmentation_learner.model[0].load_state_dict(
            torch.load(encoder_path), strict=True)
    return segmentation_learner