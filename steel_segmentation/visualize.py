# AUTOGENERATED! DO NOT EDIT! File to edit: dev_nbs/09_visualize.ipynb (unless otherwise specified).

__all__ = ['submission_preproccessing', 'read_submission', 'read_sub_file_from_list', 'select_classid', 'update_imgids',
           'subs', 'select_valid_classid']

# Cell
import ipywidgets as widgets
from ipywidgets import interact, interact_manual, interactive
from IPython.display import Image

from .all import *
from fastcore.all import L

import os
from pathlib import Path
import pandas as pd
import numpy as np
import cv2

# Cell
def submission_preproccessing(df: pd.DataFrame) -> pd.DataFrame:
    """
    Process a submission DataFrame and
    splits the ImageId_ClassId column into ImageId and ClassId.
    """
    if not ("ImageId_ClassId" in df.columns):
        raise ValueError("Missing ImageId_ClassId column")

    splitted_cols = df["ImageId_ClassId"].str.split("_", expand=True)
    df["ImageId"], df["ClassId"] = splitted_cols[0], splitted_cols[1].astype("int64")

    return df

# Cell
def read_submission(file_name:str = "ensemble_submission.csv") -> pd.DataFrame:
    """
    Open a submission csv file in the `sub_path` directory and
    return the DataFrame preprocessed with `submission_preproccessing`.
    """
    df = pd.read_csv(sub_path / file_name)
    return submission_preproccessing(df)

# Cell
subs =[file for file in os.listdir(str(sub_path)) if file.endswith(".csv")]

def read_sub_file_from_list(sub = subs) -> pd.DataFrame:
    df = read_submission(sub)
    return submission_preproccessing(df)

def select_classid(ClassId=[1,2,3,4], n=5, shuffle=True):
    df = submission.result
    cond_NaN = df.EncodedPixels.notna()
    cond_ClassId = df['ClassId'] == ClassId
    result = df.loc[cond_NaN & cond_ClassId]
    if shuffle: return result.sample(n=n, replace=True)
    else: return result.head(n)

def update_imgids(*args):
    images.value = class_selection.result.loc[cond].ImageId.to_list()

# Cell
def select_valid_classid(ClassId=[1,2,3,4], n=5, shuffle=False):
    df = read_sub_file_from_list("ensemble_validation.csv")

    cond_NaN = df.EncodedPixels.notna()
    cond_ClassId = df['ClassId'] == ClassId
    result = df.loc[cond_NaN & cond_ClassId]
    if shuffle: return result.sample(n=n, replace=True)
    else: return result.head(n)